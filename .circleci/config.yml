version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@6.14.0
  aws-ecs: circleci/aws-ecs@0x.y.z
  aws-s3: circleci/aws-s3@2.0.0

jobs:
  build:
    working_directory: ~/repo
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout
      - run:
          name: update-npm
          command: "sudo npm install -g npm@5"
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-packages
          command: |
            cd frontend
            npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - persist_to_workspace:
          root: .
          paths:
            - .
  test:
    working_directory: ~/repo
    docker:
      - image: circleci/node:10.16.3
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - attach_workspace:
          at: ~/repo
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: test
          command: |
            cd backend
            npm run test
  deploy:
    working_directory: ~/repo
    docker:
      - image: circleci/node:10.16.3
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - attach_workspace:
          at: ~/repo
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: build-project
          command: |
            cd frontend
            npm run generate
      - run:
          name: Deploy to S3
          command: |
            cd frontend
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws s3 cp dist s3://${S3_DIRECTORY} --recursive
  build-backend:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/code
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            cd backend
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
      - save_cache:
          paths:
            - venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - persist_to_workspace:
          root: .
          paths:
            - .

workflows:
  build-test-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy:
          filters:
            branches:
              only: master
          requires:
            - build
            - test
      - build-backend
      - aws-ecr/build-and-push-image:
          repo: "${AWS_RESOURCE_NAME_PREFIX}"
          tag: "${CIRCLE_SHA1}"
          dockerfile: web.Dockerfile
          path: backend/
